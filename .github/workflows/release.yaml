name: Release

on:
  release:
    types:
      - published

env:
  MODULE_NAME: nnreslib

jobs:
  upload-release:
    name: upload-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache env
        id: cache-env
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/linting.txt', 'requirements/build.txt', 'requirements/main.txt') }}
      - name: Create env
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements/linting.txt -r requirements/build.txt -r requirements/main.txt
      - name: Linting with flake8
        run: |
          flake8 $MODULE_NAME
      - name: Linting with pylint
        run: |
          pylint $MODULE_NAME
      - name: Linting with pycodestyle
        run: |
          pycodestyle $MODULE_NAME
      - name: Linting with mypy
        run: |
          mypy $MODULE_NAME
      - name: Linting with isort
        run: |
          isort --check-only $MODULE_NAME
      - name: Linting with black
        run: |
          black --check $MODULE_NAME
      - name: Run tests
        run: |
          pytest
      - name: Create code coverage report
        if: always()
        run: |
          coverage xml
      - name: Upload coverage result to codecov.io
        if: always()
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          verbose: true
      - name: Check version
        run: |
          TAG=$(git describe --tags)
          TAG=${TAG:1}
          VERSION=$(cat nnreslib/__init__.py | grep -Po $'\s*[\'"]([^\'""]+)[\'"]' | tr -d ' "')
          if [ "$TAG" = "$VERSION" ]; then
            echo "Package version and git tag is equal"
          else
            echo "Package version [$VERSION] not equal to git tag [$TAG]"
            exit 1
          fi;
      - name: Build and publish package
        run: |
          echo "Build package"
          python setup.py sdist bdist_wheel
          # TODO: This need? echo "Run test on build package"
          echo "Publish to test PyPi"
          twine upload --repository testpypi -u $TWINE_TEST_USERNAME -p $TWINE_TEST_PASSWORD dist/*
          echo "Publish to production PyPi"
          twine upload dist/*
        env:
          TWINE_TEST_USERNAME: ${{ secrets.TEST_PYPY_USERNAME }}
          TWINE_TEST_PASSWORD: ${{ secrets.TEST_PYPY_PASSWORD }}
          TWINE_USERNAME: ${{ secrets.PYPY_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPY_PASSWORD }}
