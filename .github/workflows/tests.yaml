name: Tests

on:
  push:
    branches:
      - "*"
  pull_request:

env:
  MODULE_NAME: nnreslib

jobs:
  prepare-env:
    name: prepare-env
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache env
        id: cache-env
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/linting.txt', 'requirements/build.txt', 'requirements/tests.txt', 'requirements/main.txt') }}
      - name: Create env
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          pip install -r requirements/tests.txt -r requirements/main.txt

  linting:
    needs:
      - prepare-env
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache env
        id: cache-env
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/linting.txt', 'requirements/build.txt', 'requirements/tests.txt', 'requirements/main.txt') }}
      - name: Lint with flake8, pylint, pycodestyle, mypy, isort, black
        run: |
          pytest --pylint-rcfile=setup.cfg --flake8 --pylint --pycodestyle --mypy --isort --black --keep-duplicates --junit-xml=test-results/linting_status.xml $MODULE_NAME
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-results

  tests:
    needs:
      - prepare-env
    name: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache env
        id: cache-env
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/linting.txt', 'requirements/build.txt', 'requirements/tests.txt', 'requirements/main.txt') }}
      - name: Run tests
        run: |
          coverage run -m pytest -v --junit-xml=test-results/pytest_status.xml tests
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-results
      - name: Create code coverage report
        if: always()
        run: |
          coverage xml  || (($? == 2)) && exit 0 || exit $?
      - name: Upload coverage result to codecov.io
        if: always()
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/coverage.xml
          flags: unittests
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          verbose: true

  build:
    needs:
      - prepare-env
      - linting
      - tests
    name: Build package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache env
        id: cache-env
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/linting.txt', 'requirements/build.txt', 'requirements/tests.txt', 'requirements/main.txt') }}
      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

  publish-test-results:
    name: Publish Tests Results
    needs:
      - linting
      - tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (success() || failure())
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: test-results
          path: test-results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.5
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: test-results/*.xml
          report_individual_runs: true
          deduplicate_classes_by_file_name: true
